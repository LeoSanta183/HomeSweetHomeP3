//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input System/Input system.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputsystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputsystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input system"",
    ""maps"": [
        {
            ""name"": ""PlayerOnGround"",
            ""id"": ""6e24b4f4-34b9-4555-9db9-37cd642f693d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""228b3d64-ec35-488e-afeb-1332ce47e8b8"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look around"",
                    ""type"": ""Value"",
                    ""id"": ""9070c432-0796-4b86-81cc-ba9583671aa3"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Value"",
                    ""id"": ""8b85dd47-542c-447d-96c0-b3f06b8f02f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""13a167e3-9d89-4b84-8992-804540807596"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40771658-7d07-4bb4-953f-4729d12f1865"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look around"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb950a75-008e-4938-b25b-e6efcd2f1d82"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerOnGround
        m_PlayerOnGround = asset.FindActionMap("PlayerOnGround", throwIfNotFound: true);
        m_PlayerOnGround_Move = m_PlayerOnGround.FindAction("Move", throwIfNotFound: true);
        m_PlayerOnGround_Lookaround = m_PlayerOnGround.FindAction("Look around", throwIfNotFound: true);
        m_PlayerOnGround_Shoot = m_PlayerOnGround.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerOnGround
    private readonly InputActionMap m_PlayerOnGround;
    private IPlayerOnGroundActions m_PlayerOnGroundActionsCallbackInterface;
    private readonly InputAction m_PlayerOnGround_Move;
    private readonly InputAction m_PlayerOnGround_Lookaround;
    private readonly InputAction m_PlayerOnGround_Shoot;
    public struct PlayerOnGroundActions
    {
        private @Inputsystem m_Wrapper;
        public PlayerOnGroundActions(@Inputsystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerOnGround_Move;
        public InputAction @Lookaround => m_Wrapper.m_PlayerOnGround_Lookaround;
        public InputAction @Shoot => m_Wrapper.m_PlayerOnGround_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_PlayerOnGround; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerOnGroundActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerOnGroundActions instance)
        {
            if (m_Wrapper.m_PlayerOnGroundActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnMove;
                @Lookaround.started -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnLookaround;
                @Lookaround.performed -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnLookaround;
                @Lookaround.canceled -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnLookaround;
                @Shoot.started -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayerOnGroundActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_PlayerOnGroundActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Lookaround.started += instance.OnLookaround;
                @Lookaround.performed += instance.OnLookaround;
                @Lookaround.canceled += instance.OnLookaround;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public PlayerOnGroundActions @PlayerOnGround => new PlayerOnGroundActions(this);
    public interface IPlayerOnGroundActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLookaround(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
